#! /usr/bin/env python
#
# Copyright (C) 2017, DFKI GmbH
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the DFKI GmbH nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#  Created on: 2017-01-06
#
#      Author: Martin Guenther <martin.guenther@dfki.de>

PACKAGE='basler_tof'
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

######  Name                    Type      Reconfiguration level             Description                                        Default Min  Max

### Acquisition Control
gen.add("frame_rate",           int_t,    0, "Acquisition rate at which the frames are captured. [Hz]",                        15,     1,   15)
gen.add("exposure_auto",        bool_t,   0, "Enable automatic exposure mode.",                                                True)
gen.add("exposure_time",        int_t,    0, "Exposure time when exposure_auto = false",                                       15000,  300, 30000) # increment: 100
gen.add("exposure_agility",     double_t, 0, "Reaction speed of the continuous exposure mechanism when exposure_auto = true.", 0.4,    0.1, 1.0)   # increment: 0.1
gen.add("exposure_delay",       int_t,    0, "The number of frames it takes until the continuous exposure mechanism reacts"
                                             + " to a change in the exposure time when exposure_auto = true.",                 2,      1,   10)
### Image Quality Control
gen.add("confidence_threshold", int_t,    0, "Pixels have to exceed the confidence value specified here in order to be"
                                             + " taken into account for the distance measurement",                             2048,   0,   65536) # increment: 16
gen.add("spatial_filter",       bool_t,   0, "Enable the spatial noise filter (uses the values of neighboring pixels to"
                                             + " filter out noise in an image).",                                              True)
gen.add("temporal_filter",      bool_t,   0, "Enable the temporal noise filter (uses the values of the same pixel at"
                                             + "different points in time to filter out noise in an image).",                   True)
gen.add("temporal_strength",    int_t,    0, "Strength of the temporal filter. The higher the value, the further back the"
                                             + " memory of the filter reaches. High values can cause motion artifacts, while"
                                             + " low values reduce the efficacy of the filter.",                               190,    50,  240)   # increment: 5
gen.add("outlier_tolerance",    int_t,    0, "Maximum distance that a pixel's depth is allowed to differ from that of its"
                                               + " neighboring pixels [mm].",                                                  2000,   0,   65535) # increment: 16

exit(gen.generate(PACKAGE, "basler_tof_node", "BaslerToF"))
