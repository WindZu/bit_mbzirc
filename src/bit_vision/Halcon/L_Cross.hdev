<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c></c>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>dev_set_colored (12)</l>
<l>dev_set_draw ('margin')</l>
<c></c>
<l>read_cam_par ('../model/campar2_01.dat', CameraParam)</l>
<c></c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('/home/ugvcontrol/image/ZED/test', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,4]" as_ord="1">    </c>
<l>    decompose3 (Image, Image1, Image2, Image3)</l>
<l>    trans_from_rgb (Image1, Image2, Image3, ImageH, ImageS, ImageV, 'hsv')</l>
<c>            </c>
<l>    median_image (ImageV, ImageMedian, 'circle', 25, 'mirrored')</l>
<c>    </c>
<l>    binary_threshold (ImageMedian, Region, 'max_separability', 'light', UsedThreshold)</l>
<l>    *threshold (ImageMedian, Region, 128, 255)</l>
<c>    *可以判断下阈值是否合适</c>
<l>    if(UsedThreshold)</l>
<c>        </c>
<l>    endif</l>
<c>    </c>
<c>     </c>
<c>    *区域联通选择最大的</c>
<l>    connection (Region, ConnectedRegions)</l>
<l>    fill_up (ConnectedRegions, RegionFillUp)</l>
<l>    area_center (RegionFillUp, Area, Row, Column)</l>
<l>    tuple_sort_index (Area, Indices)  </l>
<l>    select_obj (RegionFillUp, LObjectSelected, Indices[|Indices|-1]+1)</l>
<c>    </c>
<c>    *膨胀做差找边</c>
<l>    dilation_circle (LObjectSelected, RegionDilation, 1.5)</l>
<l>    difference (RegionDilation, LObjectSelected, RegionDifference)</l>
<c>  </c>
<l>    get_image_size (Image, Width, Height)  </l>
<l>    gen_rectangle1 (Rectangle, 5, 5, Height-10, Width-10)</l>
<l>    intersection (Rectangle, RegionDifference, RegionIntersection)</l>
<c>    </c>
<c>    *提取骨架</c>
<l>    skeleton (RegionIntersection, Skeletons)</l>
<l>    connection (Skeletons, ConnectedSkeleton)</l>
<l>    count_obj (ConnectedSkeleton, Number)</l>
<c>    </c>
<l>    if(Number!=2)</l>
<l>        stop()</l>
<l>        continue</l>
<l>    endif</l>
<c></c>
<c>    *拟合线</c>
<l>    RowBegins:=[]</l>
<l>    ColBegins:=[]</l>
<l>    RowEnds:=[]</l>
<l>    ColEnds:=[]</l>
<l>    for I := 1 to Number by 1</l>
<l>        select_obj (ConnectedSkeleton, Skeleton, I)</l>
<l>        gen_contours_skeleton_xld (Skeleton, Contours, 1, 'filter')</l>
<l>        segment_contours_xld (Contours, ContoursSplit, 'lines', 5, 4, 2)      </l>
<l>        select_contours_xld (ContoursSplit, SelectedContours, 'contour_length', 30, 20000, -0.5, 0.5)       </l>
<l>        union_collinear_contours_xld (SelectedContours, UnionContours, 10, 1, 200, 0.1, 'attr_keep')       </l>
<l>        length_xld (UnionContours, Length)</l>
<l>        tuple_sort_index (Length, ContLengthIndices)       </l>
<c>        </c>
<l>        select_obj (UnionContours, ObjectSelected1, ContLengthIndices[|ContLengthIndices|-1]+1)</l>
<l>        select_obj (UnionContours, ObjectSelected2, ContLengthIndices[|ContLengthIndices|-2]+1)</l>
<l>        fit_line_contour_xld (ObjectSelected1, 'huber', -1, 0, 15, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<l>        RowBegins:=[RowBegins,RowBegin]</l>
<l>        ColBegins:=[ColBegins,ColBegin]</l>
<l>        RowEnds:=[RowEnds,RowEnd]</l>
<l>        ColEnds:=[ColEnds,ColEnd]</l>
<c>           </c>
<l>        fit_line_contour_xld (ObjectSelected2, 'huber', -1, 0, 15, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<l>        RowBegins:=[RowBegins,RowBegin]</l>
<l>        ColBegins:=[ColBegins,ColBegin]</l>
<l>        RowEnds:=[RowEnds,RowEnd]</l>
<l>        ColEnds:=[ColEnds,ColEnd]</l>
<c>       </c>
<l>    endfor</l>
<c>    </c>
<l>    if(|RowBegins|!=4)</l>
<l>        stop()</l>
<l>        continue</l>
<l>    endif</l>
<c>    *求交点  </c>
<l>    CrossRows:=[]</l>
<l>    CrossColumns:=[]</l>
<c>      </c>
<l>    intersection_lines (RowBegins[0], ColBegins[0], RowEnds[0], ColEnds[0], RowBegins[1], ColBegins[1], RowEnds[1], ColEnds[1], CrossRow, CrossColumn, IsOverlapping)</l>
<l>    CrossRows:=[CrossRows,CrossRow]</l>
<l>    CrossColumns:=[CrossColumns,CrossColumn]</l>
<l>    for J := 2 to 3 by 1</l>
<l>        angle_ll (RowBegins[1], ColBegins[1], RowEnds[1], ColEnds[1], RowBegins[J], ColBegins[J], RowEnds[J], ColEnds[J], Angle)</l>
<l>        if((abs(deg(Angle))&gt;45 and abs(deg(Angle))&lt;135) or (abs(deg(Angle))&gt;225 and abs(deg(Angle))&lt;315))</l>
<l>            intersection_lines (RowBegins[1], ColBegins[1], RowEnds[1], ColEnds[1], RowBegins[J], ColBegins[J], RowEnds[J], ColEnds[J], CrossRow, CrossColumn, IsOverlapping)</l>
<l>            CrossRows:=[CrossRows,CrossRow]</l>
<l>            CrossColumns:=[CrossColumns,CrossColumn]</l>
<l>            break</l>
<l>        endif</l>
<l>    endfor </l>
<c>    </c>
<l>    M:=J</l>
<l>    N:=(3-M)+2</l>
<l>    intersection_lines (RowBegins[M], ColBegins[M], RowEnds[M], ColEnds[M], RowBegins[N], ColBegins[N], RowEnds[N], ColEnds[N], CrossRow, CrossColumn, IsOverlapping)</l>
<l>    CrossRows:=[CrossRows,CrossRow]</l>
<l>    CrossColumns:=[CrossColumns,CrossColumn]</l>
<l>    intersection_lines (RowBegins[N], ColBegins[N], RowEnds[N], ColEnds[N], RowBegins[0], ColBegins[0], RowEnds[0], ColEnds[0], CrossRow, CrossColumn, IsOverlapping)</l>
<l>    CrossRows:=[CrossRows,CrossRow]</l>
<l>    CrossColumns:=[CrossColumns,CrossColumn]</l>
<c>    </c>
<l>    gen_cross_contour_xld (Cross, CrossRows, CrossColumns, 200, 0.785398)</l>
<l>    gen_contour_polygon_xld (Contour, CrossRows, CrossColumns)</l>
<l>    close_contours_xld (Contour, ClosedContours)</l>
<l>    gen_region_contour_xld (ClosedContours, ClosedContoursRegion, 'filled')</l>
<l>    gen_contour_region_xld (ClosedContoursRegion, ClosedContours, 'border')</l>
<c></c>
<c>    </c>
<l>    tuple_gen_const (|CrossRows|, 100, Radus)</l>
<l>    gen_circle (Circle, CrossRows, CrossColumns, Radus)</l>
<l>    dev_display (ImageMedian)</l>
<l>    dev_display (Circle)</l>
<c>    </c>
<c>    </c>
<l>    intersection (Circle, LObjectSelected, CircleRegionIntersection)</l>
<l>    area_center (CircleRegionIntersection, Area1, Row1, Column1)</l>
<l>    tuple_sort_index (Area1, MeanIndices)</l>
<c>    </c>
<l>    MinIndex:= MeanIndices[0]</l>
<l>    WorldX:=[0.0,0.4,0.4,0.0]</l>
<l>    WorldY:=[0.0,0.0,0.4,0.4]</l>
<l>    WorldZ:=[0.0,0.0,0.0,0.0]</l>
<c>    </c>
<l>    ImageRow:=[CrossRows[MinIndex],CrossRows[(MinIndex+1)%4],CrossRows[(MinIndex+2)%4],CrossRows[(MinIndex+3)%4]]</l>
<l>    ImageColumn:=[CrossColumns[MinIndex],CrossColumns[(MinIndex+1)%4],CrossColumns[(MinIndex+2)%4],CrossColumns[(MinIndex+3)%4]]</l>
<c>    </c>
<l>    vector_to_pose (WorldX, WorldY, WorldZ, ImageRow, ImageColumn, CameraParam, 'iterative', 'error', Pose, Quality)</l>
<l>    dev_display (ImageMedian)</l>
<l>    disp_3d_coord_system (WindowHandle, CameraParam, Pose, 0.4)</l>
<l>    convert_pose_type (Pose, 'Rp+T', 'abg', 'point', Pose)</l>
<c></c>
<l>    stop()</l>
<c>    </c>
<c>    </c>
<c>    </c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[3,1]" as_ord="1">endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
