<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1">* Image Acquisition 01: Code generated by Image Acquisition 01</c>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,2]" as_ord="1">list_files ('/home/mylab/image/ZED/LVS', ['files','follow_links'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,3]" as_ord="1">tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,2]" as_ord="1">for Index := 0 to |ImageFiles| - 1 by 1</l>
<l as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[2,3]" as_ord="1">    read_image (Image, ImageFiles[Index])</l>
<l>    get_image_size (Image, Width, Height)</l>
<c>    </c>
<c>    *calculate angle</c>
<c>    </c>
<l>    decompose3 (Image, Image1, Image2, Image3)</l>
<l>    trans_from_rgb (Image1, Image2, Image3, ImageH, ImageS, ImageV, 'hsv')</l>
<c>    *</c>
<l>    threshold (ImageS, Regions1, 1, 73)</l>
<c>    *</c>
<c>    </c>
<c>    *</c>
<l>    threshold (ImageV, Regions2, 114, 255)</l>
<l>    intersection (Regions1, Regions2, RegionIntersection)</l>
<l>    connection (RegionIntersection, ConnectedRegions)</l>
<c>    </c>
<l>    closing_rectangle1 (ConnectedRegions, RegionClosing, 30, 30)</l>
<l>    select_shape (RegionClosing, SelectedRegions, ['rectangularity','area'], 'and', [0.8,10000], [1,100000000])</l>
<c>    *</c>
<l>    orientation_region (SelectedRegions, Phi)</l>
<l>    elliptic_axis (SelectedRegions, Ra, Rb, Phi1)</l>
<c>    *angle</c>
<l>    theta := Phi1</l>
<c>    </c>
<l>    reduce_domain (ImageV, SelectedRegions, ImageReduced)</l>
<l>*     edges_sub_pix (ImageReduced, Edges, 'canny', 1, 20, 40)</l>
<l>    gen_contour_region_xld (SelectedRegions, Contours, 'border')</l>
<l>    segment_contours_xld (Contours, ContoursSplit, 'lines', 5, 8, 3)</l>
<l>    select_contours_xld (ContoursSplit, SelectedEdges, 'contour_length', 500, 5000, -0.05, 0.05)</l>
<l>    select_contours_xld (ContoursSplit, SelectedEdges, 'direction', -0.4, 0.4, -0.4, 0.4)</l>
<l>    union_adjacent_contours_xld (SelectedEdges, UnionContours, 10, 1, 'attr_keep') </l>
<c>    </c>
<l>    select_contours_xld (UnionContours, Lines, 'contour_length', 600, 20000, -0.05, 0.05)</l>
<c>    </c>
<l>    sort_contours_xld (Lines, SortedContours, 'upper_right', 'true', 'row')</l>
<l>    count_obj (SortedContours, Number)</l>
<l>    select_obj (SortedContours, Line, Number)</l>
<l>    dev_clear_window ()</l>
<l>    dev_display (Image)</l>
<l>    dev_display (Line)</l>
<c>    </c>
<l>    fit_line_contour_xld (Line, 'tukey', -1, 0, 5, 2, RowBegin, ColBegin, RowEnd, ColEnd, Nr, Nc, Dist)</l>
<l>    col := Width/2</l>
<l>    row:= (Dist-Nc*col)/Nr</l>
<l>    dist := Height-row</l>
<c>    </c>
<l>    stop ()</l>
<l>endfor</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
