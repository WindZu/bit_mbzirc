<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.05">
<procedure name="main">
<interface/>
<body>
<l>dev_open_window (0, 0, 640, 480, 'black', WindowHandle)</l>
<l>brick_color := 'red'</l>
<c></c>
<l>pathFile := '../models/new_segment_four.mlp'</l>
<c></c>
<l>read_class_mlp (pathFile, MLPHandle)</l>
<c>*识别</c>
<c>* Segment images</c>
<c>* Image Acquisition 03: Code generated by Image Acquisition 03</c>
<l>list_files ('/halcon_project/test_imgs', ['files','follow_links'], ImageFiles)</l>
<l>tuple_regexp_select (ImageFiles, ['\\.(tif|tiff|gif|bmp|jpg|jpeg|jp2|png|pcx|pgm|ppm|pbm|xwd|ima|hobj)$','ignore_case'], ImageFiles)</l>
<l>for Index := 0 to |ImageFiles| - 1 by 1</l>
<l>    read_image (Image, ImageFiles[Index])</l>
<c>    *</c>
<l>    classify_image_class_mlp (Image, ClassRegions, MLPHandle, 0.9)</l>
<c>    *</c>
<l>    if (brick_color = 'orange')</l>
<l>        select_obj (ClassRegions, ClassRegion, 1)</l>
<l>    elseif (brick_color = 'blue')</l>
<l>        select_obj (ClassRegions, ClassRegion, 2)</l>
<l>    elseif (brick_color = 'green')</l>
<l>        select_obj (ClassRegions, ClassRegion, 3)</l>
<l>    elseif (brick_color = 'red')    </l>
<l>        select_obj (ClassRegions, ClassRegion, 4)</l>
<l>    endif</l>
<c>    </c>
<l>    dev_display (Image)</l>
<l>    dev_display (ClassRegion)</l>
<c>    </c>
<l>    try</l>
<c>        *set area threshold</c>
<l>        connection (ClassRegion, ConnectedRegions)</l>
<l>        select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 150, 99999999)</l>
<l>        area_center (SelectedRegions, Area, Row, Column)</l>
<c>        </c>
<c>        *sort according to area</c>
<l>        tuple_sort_index (Area, Indices)</l>
<l>        tuple_inverse (Indices, Inverted)</l>
<l>        R := Row[Inverted[0]]</l>
<l>        C := Column[Inverted[0]]</l>
<c>    </c>
<l>    catch (Exception)</l>
<l>    endtry</l>
<c></c>
<c>    </c>
<l>    stop ()</l>
<l>endfor</l>
<c></c>
<l>dev_clear_window ()</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="get_features">
<interface>
<io>
<par name="Region" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Features" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>select_obj (Region, SingleRegion, 1)</l>
<l>circularity (SingleRegion, Circularity)</l>
<l>roundness (SingleRegion, Distance, Sigma, Roundness, Sides)</l>
<l>moments_region_central_invar (SingleRegion, PSI1, PSI2, PSI3, PSI4)</l>
<l>Features := [Circularity,Roundness,PSI1,PSI2,PSI3,PSI4]</l>
<l>return ()</l>
</body>
<docu id="get_features">
<parameters>
<parameter id="Features"/>
<parameter id="Region"/>
</parameters>
</docu>
</procedure>
<procedure name="classify">
<interface>
<io>
<par name="Regions" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="MLPHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Classes" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>count_obj (Regions, Number)</l>
<l>Classes := []</l>
<l>for J := 1 to Number by 1</l>
<l>    select_obj (Regions, Region, J)</l>
<l>    get_features (Region, Features)</l>
<l>    classify_class_mlp (MLPHandle, Features, 1, Class, Confidence)</l>
<l>    Classes := [Classes,Class]</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="classify">
<parameters>
<parameter id="Classes"/>
<parameter id="MLPHandle"/>
<parameter id="Regions"/>
</parameters>
</docu>
</procedure>
<procedure name="segment">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Regions" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>binary_threshold (Image, Region, 'max_separability', 'dark', UsedThreshold)</l>
<l>connection (Region, ConnectedRegions)</l>
<l>fill_up (ConnectedRegions, Regions)</l>
<l>return ()</l>
</body>
<docu id="segment">
<parameters>
<parameter id="Image"/>
<parameter id="Regions"/>
</parameters>
</docu>
</procedure>
</hdevelop>
